stages:
  - install_dependency
  # - test
  - code_scan
  - version_control
  - build
  - buildimage
  # - itsm
  # - itsm_result
  # - retag
  - update
  - schedule_update

cache:
  paths:
    - node_modules

variables:
  # CI_FUNC_FILE: 'https://gitlab.wistron.com/i4.0/cicdtemplate/raw/master/ci-funcs.sh?inline=false'
  BUILD_IMAGE_NAME: 'tbd'
  SONAR_EXCLUDE: 'test/**/*'
  SONAR_URL: 'https://sonarqube.wistron.com'
  SONAR_TOKEN: 'b52a531cc9e478600be2ce4fa4f30690e238e6c8'
  VERSION_FILE: 'version.txt'
  SONAR_PROJECT_NAME: $CI_PROJECT_NAME
  # DEFAULT_DOCKER_URL: 'https://gitlab.wistron.com/i4.0/cicdtemplate/raw/master/samples/job/nodejs/Dockerfile?inline=false'
  isTicketFinish: ""

chec_env:
  only:
    refs:
      # - master
      - pre-production
      - production
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  image: harbor.wistron.com/base_image/vc-tool:latest
  cache: {}
  except:
    - tags
  stage: .pre
  tags:
    - prd-runner01
  before_script:
    - if test "${scheduler}x" == "truex" && test "${SCHEDULE_VER}x" == "x"; then echo "Skip Schedule"; exit 0; fi;
    - export https_proxy=''
    - export http_proxy=''
  script:
    # - curl $CI_FUNC_FILE > ci-funcs.sh
    - . ci-funcs.sh
    - check_env
    - check_required_file "Dockerfile" $DEFAULT_DOCKER_URL
  artifacts:
    paths:
      - ci-funcs.sh
      - Dockerfile
    when: always
    expire_in: 1 days

npm_install:
  only:
    refs:
      - master
  image: harbor.wistron.com/base_image/node:12
  except:
    - tags
  stage: install_dependency
  tags:
    - prd-runner01
  script:
    - echo "npm i..."
    - npm i --unsafe-perm

auto_testing:
  only:
    refs:
      - master
  image: harbor.wistron.com/base_image/node:12
  except:
    - tags
  stage: test
  tags:
    - prd-runner01
  before_script:
    - if test "${SOURCEPJ}" != "true"; then echo "Not Source Code Project, exit ci."; exit 0; fi;
  script:
    - echo "npm run test..";
    # - npm run test
  artifacts:
    paths:
      - ./coverage/
    when: always
    expire_in: 1 days
  allow_failure: true

code_scan:
  only:
    refs:
      - master
  image: harbor.wistron.com/base_image/sonar-scanner-cli:4
  cache: {}
  except:
    - tags
  stage: code_scan
  tags:
    - prd-runner01
  before_script:
    - if test "${SOURCEPJ}" != "true"; then echo "Not Source Code Project, exit ci."; exit 0; fi;
  script:
    - echo "code scan..";
    - sonar-scanner -Dsonar.projectName=$SONAR_PROJECT_NAME -Dsonar.projectKey=$SONAR_PROJECT_NAME -Dsonar.sources=. -Dsonar.host.url=${SONAR_URL} -Dsonar.login=${SONAR_TOKEN} -Dsonar.javascript.lcov.reportPaths=./coverage/lcov.info -Dsonar.exclusions=$SONAR_EXCLUDE

get_version:
  only:
    refs:
      - master
      - pre-production
      - production
  image: harbor.wistron.com/base_image/vc-tool:latest
  cache: {}
  stage: version_control
  tags:
    - prd-runner01
  before_script:
    - if test "${scheduler}x" == "truex" && test "${SCHEDULE_VER}x" == "x"; then echo "Skip Schedule"; exit 0; fi;
    - if test "${scheduler}x" == "truex" && test "${SCHEDULE_VER}x" != "x"; then echo "export SYS_VER="${SCHEDULE_VER}";" > build-vars-docker_build.sh; exit 0; fi;
    - apk add curl
    - apk add jq
    - . ci-funcs.sh
  script:
    - get_version
    - update_git_version ${CI_COMMIT_REF_NAME} ${SYS_VER} ${SYS_VER_S}
    - echo "export SYS_VER="${SYS_VER}";" >build-vars-docker_build.sh
  artifacts:
    paths:
      - build-vars.sh
      - build-vars-docker_build.sh
    when: always
    expire_in: 1 days


docker-build:
  only:
      - master
  image: harbor.wistron.com/base_image/vc-tool:latest
  stage: buildimage
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  tags:
    - prd-runner01
  before_script:
    - source build-vars.sh
    - echo ${SYS_VER}
    - . ci-funcs.sh
  script:
    - docker_build
    - echo "docker build";
    - echo "docker push";

itsm:
  only:
    refs:
      - production
    variables:
      - $isTicketFinish == "" && $scheduler != "true"
  stage: itsm
  image: harbor.wistron.com/base_image/itsm:qas
  tags:
    - prd-runner01
  script:
    - if test "${ITSM_TICKET_NUMBER}" != ""; then echo "still have the ITSM ticket (${ITSM_TICKET_NUMBER}) to deal with"; exit 1; fi;
    - echo "call itsm api"
    - TicketNum=$(itsm ./itsm.json)    #itsm.json定義在project上
    - echo "ticket number is $TicketNum"
    - echo "get itsm ticket number"
    - echo "set global variable 'ITSM_TICKET_NUMBER'"
    - . ci-funcs.sh
    - set_ticket_number
    - curl --request PUT --header "PRIVATE-TOKEN:${GITLAB_KEY}" --form value=${TicketNum} --url "${GITLAB_URL}/api/v4/projects/${CI_PROJECT_ID}/variables/ITSM_TICKET_NUMBER"
    - echo "create tag for waitting"
    - echo "lock ITSM_TICKET_NUMBER variable"

itsm_result:
  only:
    refs:
      - production
    variables:
      - $scheduler != "true"
  stage: itsm_result
  image: harbor.wistron.com/base_image/gitlabapi:alpine
  tags:
    - prd-runner01
  before_script:
    - . ci-funcs.sh
  script:
    - echo "deploy from $ITSM_TICKET_NUMBER"
    - source build-vars.sh
    - echo ${SYS_VER}
    - tag_itsm_status


update-nonprd:
  only:
    refs:
      - master
      - pre-production
  tags:
    - prd-runner01
  stage: update
  image: harbor.wistron.com/base_image/vc-tool:latest
  cache: {}
  before_script:
    - export CI_JOB_TIMESTAMP=$(date +"%s")
    - |
      {
        source build-vars-docker_build.sh;
      } || {
        echo "No need to update.";
        exit 0;
      }
    - echo ${SYS_VER}
    - . ci-funcs.sh
  script:
    # - cd_update
    - echo "Do K8S Update";

ng-build:
  image: harbor.wks.wistron.com.cn/base_image/ng-cli-karma:9.1.6
  stage: build
  only:
    - master
  dependencies:
    - npm_install
  script:
    - node --max_old_space_size=4096 node_modules/@angular/cli/bin/ng build
    - ng build --output-hashing=all && cp ./nginx-custom.conf ./dist/nginx-custom.conf
    - echo "ng build";
  tags:
    - prd-runner01
  artifacts:
    paths:
      - ./dist/
    when: always
    expire_in: 1 days

retag:
  only:
    refs:
      - pre-production
      - production
    variables:
      - $isTicketFinish == ""
  tags:
    - prd-runner01
  stage: retag
  image: harbor.wistron.com/base_image/alpine:3.10
  cache: {}
  before_script:
    - if test "${SCHEDULE_VER}x" == "x"; then echo "Skip Schedule"; exit 0; fi;
    - apk add curl
    - apk add jq
    - if test $scheduler == "true"; then source build-vars-docker_build.sh; else source build-vars.sh; fi;
    - echo ${SYS_VER}
    - . ci-funcs.sh
  script:
    - retag
  artifacts:
    paths:
      - build-vars-docker_build.sh
    when: always
    expire_in: 1 days

update-prd:
  only:
    refs:
      - production
    variables:
      - $scheduler != "true"
  tags:
    - prd-runner01
  stage: update
  image: harbor.wistron.com/base_image/vc-tool:latest
  cache: {}
  before_script:
    - . ci-funcs.sh
    - if test "${isTicketFinish}x" == "falsex"; then echo "ITSM ticket (${ITSM_TICKET_NUMBER}) is denied"; set_ticket_number ""; exit 1; fi;
    - if test "${isTicketFinish}x" == "x"; then echo "ITSM ticket (${ITSM_TICKET_NUMBER}) is pending"; exit 0; fi;
    - echo "ITSM ticket (${ITSM_TICKET_NUMBER}) is approved"
    - if test "${SCHEDULE_FLAG}x" == "Yx"; then echo "ITSM ticket (${ITSM_TICKET_NUMBER}) is waitting for schedule run.."; exit 0; fi;
    - set_ticket_number "";
    - export CI_JOB_TIMESTAMP=$(date +"%s")
    - |
      {
        source build-vars-docker_build.sh;
      } || {
        echo "No need to update.";
        exit 0;
      }
    - echo ${SYS_VER}
  script:
    - cd_update
    - echo "Do K8S Update";

schedule_update:
  only:
    refs:
      - production
    variables:
      - $scheduler == "true" && $SCHEDULE_VER != "" 
  tags:
    - prd-runner01
  stage: schedule_update
  image: harbor.wistron.com/base_image/vc-tool:latest
  cache: {}
  before_script:
    - if test "${SCHEDULE_VER}x" == "x"; then echo "No Version to update"; exit 0; fi;
    - export CI_JOB_TIMESTAMP=$(date +"%s")
    - |
      {
        source build-vars-docker_build.sh;
      } || {
        echo "No need to update.";
        exit 0;
      }
    - echo ${SYS_VER}
    - . ci-funcs.sh
  script:
    - retag
    - curl --request PUT --header "PRIVATE-TOKEN:${GITLAB_KEY}" --form value="" --url "${GITLAB_URL}/api/v4/projects/${CI_PROJECT_ID}/variables/SCHEDULE_VER"
    - cd_update
    - echo "Do K8S Update";
    - set_ticket_number "";
